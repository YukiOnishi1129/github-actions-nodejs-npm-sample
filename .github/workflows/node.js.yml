# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI # ワークフローの名前

on: # ワークフローを実行するイベントを定義
  push:
    branches: [main] # mainリポジトリにpushされた時
  pull_request:
    branches: [main] # mainリポジトリ宛のPRが出された時

jobs: # ワークフロー内で実行されるjobを定期
  build:
    runs-on: ubuntu-latest # ワークフローが実行される仮想環境(ランナー)を定義 (Ubuntuの最新版を指定)

    strategy: # ワークフローを特定にパラメータの組み合わせで繰り返し実行する「マトリクス」を定義する
      matrix:
        node-version: [16.x] # nodeが12系、14系、16系でそれぞれワークフローが実行される
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps: # ジョブで実行されるステップを定義 users: アクションを呼び出す run: コマンドを実行
      - uses: actions/checkout@v2 # リポジトリをチェックアウト
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2 # 仮想環境のNode.jsのバージョンをセットアップ
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get NPM cache directory
        id: npm-cache # ②後のステップからコンテキスト経由でステップのアウトプットにアクセスするために使う
        # ${{steps.npm-cache.outputs.dir}} で保存したコマンドを実行できる (①で保存したもの)
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
        # ①特定のフォーマットで文字列を出力することでコマンド実行できる
        # ::set-output name=key::value  keyで指定したキーにvalueで指定した値をステップのアウトプットとして保存できる
        # npm config get cache はnpm のキャッシュディレクトリを返すコマンド
      - name: Cache NPM
        uses: actions/cache@v2 # keyで指定したキーに完全一致するキャッシュが存在するときは、pathで指定したファイルパスに復元される
        # またジョブ終了時にpathで指定したファイルパスの内容が、keyで指定したキーでキャッシュとして保存される
        # キャッシュが保存されるのはジョブ成功時のみ
        with:
          path: ${{ steps.npm-cache.outputs.dir}}
          key: node-${{hashFiles('**/package-lock.json')}} # npmパッケージの依存関係に変更があったときは新しいキャッシュが作成される
          restore-keys: |
            node-
      - run: npm ci
      - run: npm run build --if-present
      - run: npm test
      - uses: actions/upload-artifact@v2
        # pathで指定したファイルやディレクトリが、nameで指定した名前でアーキファクトとして保存される
        with:
          name: test-coverage-${{matrix.node-version}}
          path: coverage
